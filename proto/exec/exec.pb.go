// Code generated by protoc-gen-go. DO NOT EDIT.
// source: exec.proto

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	exec.proto

It has these top-level messages:
	ExecReq
	ExecResp
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type ExecReq struct {
	TaskName          string                  `protobuf:"bytes,1,opt,name=task_name,json=taskName" json:"task_name,omitempty"`
	KeyValues         []*ExecReq_KeyValuePair `protobuf:"bytes,2,rep,name=key_values,json=keyValues" json:"key_values,omitempty"`
	Data              []byte                  `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	WaitForCompletion bool                    `protobuf:"varint,4,opt,name=wait_for_completion,json=waitForCompletion" json:"wait_for_completion,omitempty"`
}

func (m *ExecReq) Reset()                    { *m = ExecReq{} }
func (m *ExecReq) String() string            { return proto1.CompactTextString(m) }
func (*ExecReq) ProtoMessage()               {}
func (*ExecReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ExecReq) GetTaskName() string {
	if m != nil {
		return m.TaskName
	}
	return ""
}

func (m *ExecReq) GetKeyValues() []*ExecReq_KeyValuePair {
	if m != nil {
		return m.KeyValues
	}
	return nil
}

func (m *ExecReq) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *ExecReq) GetWaitForCompletion() bool {
	if m != nil {
		return m.WaitForCompletion
	}
	return false
}

type ExecReq_KeyValuePair struct {
	Key   string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *ExecReq_KeyValuePair) Reset()                    { *m = ExecReq_KeyValuePair{} }
func (m *ExecReq_KeyValuePair) String() string            { return proto1.CompactTextString(m) }
func (*ExecReq_KeyValuePair) ProtoMessage()               {}
func (*ExecReq_KeyValuePair) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

func (m *ExecReq_KeyValuePair) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *ExecReq_KeyValuePair) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type ExecResp struct {
	Completed bool   `protobuf:"varint,1,opt,name=completed" json:"completed,omitempty"`
	Data      []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *ExecResp) Reset()                    { *m = ExecResp{} }
func (m *ExecResp) String() string            { return proto1.CompactTextString(m) }
func (*ExecResp) ProtoMessage()               {}
func (*ExecResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ExecResp) GetCompleted() bool {
	if m != nil {
		return m.Completed
	}
	return false
}

func (m *ExecResp) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto1.RegisterType((*ExecReq)(nil), "proto.ExecReq")
	proto1.RegisterType((*ExecReq_KeyValuePair)(nil), "proto.ExecReq.KeyValuePair")
	proto1.RegisterType((*ExecResp)(nil), "proto.ExecResp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ExecService service

type ExecServiceClient interface {
	Exec(ctx context.Context, in *ExecReq, opts ...grpc.CallOption) (*ExecResp, error)
}

type execServiceClient struct {
	cc *grpc.ClientConn
}

func NewExecServiceClient(cc *grpc.ClientConn) ExecServiceClient {
	return &execServiceClient{cc}
}

func (c *execServiceClient) Exec(ctx context.Context, in *ExecReq, opts ...grpc.CallOption) (*ExecResp, error) {
	out := new(ExecResp)
	err := grpc.Invoke(ctx, "/proto.ExecService/Exec", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ExecService service

type ExecServiceServer interface {
	Exec(context.Context, *ExecReq) (*ExecResp, error)
}

func RegisterExecServiceServer(s *grpc.Server, srv ExecServiceServer) {
	s.RegisterService(&_ExecService_serviceDesc, srv)
}

func _ExecService_Exec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecServiceServer).Exec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ExecService/Exec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecServiceServer).Exec(ctx, req.(*ExecReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _ExecService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ExecService",
	HandlerType: (*ExecServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Exec",
			Handler:    _ExecService_Exec_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "exec.proto",
}

func init() { proto1.RegisterFile("exec.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 265 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x8f, 0x4f, 0x4b, 0xc3, 0x40,
	0x10, 0xc5, 0xcd, 0x9f, 0x6a, 0x32, 0x2d, 0xfe, 0x19, 0x3d, 0x2c, 0xad, 0x87, 0x90, 0x53, 0xbc,
	0xe4, 0x50, 0x41, 0x44, 0xbc, 0x89, 0x5e, 0x04, 0x91, 0x15, 0xbc, 0x86, 0x35, 0x1d, 0x21, 0xa4,
	0xe9, 0xc6, 0xdd, 0xb5, 0x36, 0x5f, 0xd6, 0xcf, 0x22, 0xbb, 0x09, 0xad, 0x3d, 0xed, 0xbc, 0xf7,
	0x98, 0xb7, 0xbf, 0x01, 0xa0, 0x0d, 0x95, 0x79, 0xab, 0xa4, 0x91, 0x38, 0x72, 0x4f, 0xfa, 0xeb,
	0xc1, 0xd1, 0xe3, 0x86, 0x4a, 0x4e, 0x5f, 0x38, 0x83, 0xd8, 0x08, 0x5d, 0x17, 0x2b, 0xd1, 0x10,
	0xf3, 0x12, 0x2f, 0x8b, 0x79, 0x64, 0x8d, 0x17, 0xd1, 0x10, 0xde, 0x01, 0xd4, 0xd4, 0x15, 0x6b,
	0xb1, 0xfc, 0x26, 0xcd, 0xfc, 0x24, 0xc8, 0xc6, 0xf3, 0x59, 0xdf, 0x95, 0x0f, 0x05, 0xf9, 0x33,
	0x75, 0xef, 0x36, 0x7f, 0x15, 0x95, 0xe2, 0x71, 0x3d, 0x28, 0x8d, 0x08, 0xe1, 0x42, 0x18, 0xc1,
	0x82, 0xc4, 0xcb, 0x26, 0xdc, 0xcd, 0x98, 0xc3, 0xf9, 0x8f, 0xa8, 0x4c, 0xf1, 0x29, 0x55, 0x51,
	0xca, 0xa6, 0x5d, 0x92, 0xa9, 0xe4, 0x8a, 0x85, 0x89, 0x97, 0x45, 0xfc, 0xcc, 0x46, 0x4f, 0x52,
	0x3d, 0x6c, 0x83, 0xe9, 0x0d, 0x4c, 0xfe, 0xd7, 0xe3, 0x29, 0x04, 0x35, 0x75, 0x03, 0xa6, 0x1d,
	0xf1, 0x02, 0x46, 0x8e, 0x8e, 0xf9, 0xce, 0xeb, 0x45, 0x7a, 0x0f, 0x51, 0x8f, 0xa7, 0x5b, 0xbc,
	0x84, 0x78, 0xf8, 0x8a, 0x16, 0x6e, 0x33, 0xe2, 0x3b, 0x63, 0x4b, 0xe9, 0xef, 0x28, 0xe7, 0xb7,
	0x30, 0xb6, 0xdb, 0x6f, 0xa4, 0xd6, 0x55, 0x49, 0x78, 0x05, 0xa1, 0x95, 0x78, 0xbc, 0x7f, 0xf8,
	0xf4, 0x64, 0x4f, 0xeb, 0x36, 0x3d, 0xf8, 0x38, 0x74, 0xce, 0xf5, 0x5f, 0x00, 0x00, 0x00, 0xff,
	0xff, 0xd0, 0x1f, 0x46, 0x30, 0x74, 0x01, 0x00, 0x00,
}
